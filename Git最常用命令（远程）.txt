*** 此文件已搬迁至为知笔记中维护 ***
\003.技术研究\002.开发软件\003.Git

/**
使用 git fetch 更新你的项目，使用 git push 分享你的改动。 你可以用 git remote 管理你的远程仓库。
Git 允许你为每个远端仓库添加不同的推送与获取的链接；你可以拥有一些只读的仓库，并且同时拥有一些也可写的仓库。
默认别名alias为：origin

**/
【git remote】
>git remote [-v]
列出远端别名
>git remote add [alias] [url]
为你的项目添加一个新的远端仓库
>git remote rm [alias]
删除现有的某个别名
>git remote update
确保远端没有新的提交，或者是有新的提交能够同步到本地

【git fetch】
>git fetch [alias]
从远端仓库下载新分支与数据（将你的仓库与远端仓库同步，提取所有它独有的数据到本地分支以合并或者其它操作）
>git fetch --all
同步所有的远端仓库（如果项目对应着多个远端仓库的话）
>git fetch origin master:temp
从远程的origin仓库的master分支下载到本地并新建一个分支temp

【git merge】
>git merge [alias]/[branch]
将服务器上的更新（假设有人这时候推送到服务器了）合并到你的当前分支。
也可以用以下4条命令来实现比较、合并（拉取到新建的分支temp上，然后与本地当前分支进行比较，然后合并，然后删除temp分支）－－推荐
>git fetch origin master:temp
>git diff temp
>git merge temp
>git branch -d temp

【git pull】
>git pull [alias]
从远端仓库提取数据并尝试合并到当前分支（相当于在 git fetch 之后紧接着 git merge 远端分支到你所在的任意分支）；最好少用！

【git log】
>git log [alias]/[branch] ^[branch]
查看该分支上的新提交（后一个branch是本地分支）
>git log -p master...origin/master
查看本地主分支master与远程分支master的区别。
也可以用以下两条命令来实现比较（拉取到新建的分支temp上，然后与本地当前分支进行比较）
>git fetch origin master:temp
>git diff temp

【git push】
你可以推送任何分支到任何你有写权限的仓库。 如果你的分支已经在该仓库中了，它会试着去更新，如果它不再，Git 会把它加上。
>git push [alias] [branch]
将你的 [branch] 分支推送成为 [alias] 远端上的 [branch] 分支；
注意：远程[branch]必须和本地[branch]名称一致!!!
例如
推送主分支：$ git push github master
推送test分支：$ git push github test

