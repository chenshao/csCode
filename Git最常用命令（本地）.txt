【git status】
>git status -s：
显示上次提交之后所更改或者写入索引的改动（绿M：更改已写入索引；红M：更改未写入索引－－可同时出现）

【git diff】－－diff换为difftool，使用外部工具（如BeyondCompare）进行比较
>git diff：
显示副本与索引的差别
>git diff --cached：
显示索引与快照的差别
>git diff head：
显示副本与快照的差别（无视索引）

【git archive】
>git archive -o ../updated.zip HEAD $(git diff --name-only HEAD^)：
导出最后一次提交修改过的文件
>git archive -o ../latest.zip NEW_COMMIT_ID_HERE $(git diff --name-only OLD_COMMIT_ID_HERE NEW_COMMIT_ID_HERE)：
导出两次提交之间修改过的文件

【git commit】
>git commit -a 
自动将在提交前将已记录、修改的文件放入缓存区；不过你仍然需要执行 git add 来添加新文件，就像 Subversion 一样。
>git commit -m '这是提交快照的日志内容'
提交快照，添加日志
>git commit --amend
修改最后一次commit的日志内容
>git rebase -i [commit号(需要修改的那个commit的前一个hash码)]、git commit --amend、git rebase --continue
修改历史commit的日志内容

【git log】
>git log
查看所有日志
>git log $commit
查看从$commit版本及之前的日志
>git log --stat
显示简要的增改行数统计,每次提交文件的变更统计
>git log -p
查看详细日志（比--stat更加详细）
>git log --oneline
单行显示，只显示短哈希字串和提交说明
>git log --pretty=oneline
单行显示，只显示长哈希字串和提交说明
>git log --graph
开启了拓扑图选项；查看历史中什么时候出现了分支、合并
>git log $branchname ^master
只显示分支$branchname的且不包括主分支master的日志（即显示$branchname的唯一日志）
>git log --decorate
可在日志中显示标签

【git tag】
>git tag -a v1.0
创建一个带备注的标签（给最新一次提交打上（HEAD）“v1.0”的标签）
>git tag -a v1.0 $commit
给某次提交打上标签
>git tag -d $tagname
删除标签$tagname
>git tag -l -n
标签列表及其备注

【git reset】
>git reset HEAD [ -- hello.txt]
取消索引（与git add 对应）

【git branch】
/** 
  新增（修改、删除）的文件，必须是commit之后，才算是新分支新增（修改、删除）的文件；
  如果不提交，然后从当前分支a切换支分支b后：
    1.如果不冲突，将把修改后的内容带到b中；如果此时在b中提交，则算是b修改的内容（a中的内容还原，保持修改前的样子）
    2.如果冲突，将提示不允许切换至b（例如b已有新提交，则在a提交时将会提示冲突）
**/
>git branch
列出可用的分支
>git branch $branchname
创建新分支$branchname
>git checkout -b $branchname
创建新分支$branchname，并立即切换到它
>git branch -d $branchname
删除分支$branchname

【git merge】
>git merge
将另一个分支并入当前的分支中去

【git mergetool】
使用外部工具（如BeyondCompare）进行合并


