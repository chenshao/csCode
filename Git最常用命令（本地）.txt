【git status】
>git status -s
显示上次提交之后所更改或者写入索引的改动（绿M：更改已写入索引；红M：更改未写入索引－－可同时出现）

【git diff】－－diff换为difftool，使用外部工具（如BeyondCompare）进行比较
主要使用的2个主要情况
1.查看两个分支彼此之间的差值
2.查看自发布或者某个旧历史点之后的差值
注意：几乎每一次你要对比两个分支的时候，你都会想用中间三个点的语法，因为它通常会给你你想要的。
>git diff
显示副本与索引的差别
>git diff --cached
显示索引与快照的差别
>git diff head
显示副本与快照的差别（无视索引）
>git diff master...test
显示分支master与分支test的差别
>git diff [$tagname]
显示自打上标签$tagname之后的差值
>git diff [$tagname1]...[$tagname2]
显示自打上标签$tagname到$tagname2的差值

【git archive】
>git archive -o ../updated.zip HEAD $(git diff --name-only HEAD^)
导出最后一次提交修改过的文件
>git archive -o ../latest.zip NEW_COMMIT_ID_HERE $(git diff --name-only OLD_COMMIT_ID_HERE NEW_COMMIT_ID_HERE)
导出两次提交之间修改过的文件

【git commit】
>git commit -a 
自动将在提交前将已记录、修改的文件放入缓存区；不过你仍然需要执行 git add 来添加新文件，就像 Subversion 一样。
>git commit -m '这是提交快照的日志内容'
提交快照，添加日志
>git commit --amend
修改最后一次commit的日志内容
>git rebase -i [commit号(需要修改的那个commit的前一个hash码)]、git commit --amend、git rebase --continue
修改历史commit的日志内容（把需要修改日志内容的那个commit号前的“pick”改为“edit”）

【git log】
>git log
查看所有日志
>git log $commit
查看从$commit版本及之前的日志
>git log --stat
显示简要的增改行数统计,每次提交文件的变更统计
>git log -p
查看详细日志（比--stat更加详细）
>git log --oneline
单行显示，只显示短哈希字串和提交说明
>git log --pretty=oneline
单行显示，只显示长哈希字串和提交说明
>git log --graph
开启了拓扑图选项；查看历史中什么时候出现了分支、合并
>git log --all
显示所有分支的日志
>git log $branchname ^master
只显示分支$branchname的且不包括主分支master的日志（即显示$branchname的唯一日志）
>git log --decorate
可在日志中显示标签

>git log --author
只寻找某个特定作者（名字或邮箱，大小写敏感）的提交（如：$ git log --author=ChenShao）
>git log --since --before、git log --until --after
根据日期过滤提交记录（如：$ git log --oneline --before={3.weeks.ago} --after={2010-04-18}）
>git log --grep
根据提交注释过滤提交记录（如：$ git log --grep=乱码）
>git log --grep=乱码 --grep=EmEditor
搜索“乱码”或“EmEditor”
>git log --grep=乱码 --grep=EmEditor --all-match
搜索“乱码”并且包含“EmEditor”

【git reflog】
>git reflog
列出曾经写过的备注内容

【git tag】
>git tag -a v1.0
创建一个带备注的标签（给最新一次提交打上（HEAD）“v1.0”的标签）
>git tag -a v1.0 $commit
给某次提交打上标签
>git tag -d $tagname
删除标签$tagname
>git tag -l -n
标签列表及其备注

【git branch】
/** 
  新增（修改、删除）的文件，必须是commit之后，才算是新分支新增（修改、删除）的文件；
  如果不提交，然后从当前分支a切换支分支b后：
    1.如果不冲突，将把修改后的内容带到b中；如果此时在b中提交，则算是b修改的内容（a中的内容还原，保持修改前的样子）
    2.如果冲突，将提示不允许切换至b（例如b已有新提交，则在a提交时将会提示冲突）
**/
>git branch
列出可用的分支
>git branch $branchname
创建新分支$branchname
>git checkout -b $branchname
创建新分支$branchname，并立即切换到它
>git branch -d $branchname
删除分支$branchname

【git merge】
>git merge
将另一个分支并入当前的分支中去

【git mergetool】
	使用外部工具（如BeyondCompare）进行合并

【git rebase】
>git rebase -i [commit号(需要修改的那个commit的前一个hash码)]、git commit --amend、git rebase --continue
修改历史commit的日志内容（把需要修改日志内容的那个commit号前的“pick”改为“edit”）
>git rebase -i [commit号(需要修改的那个commit的前一个hash码)]
合并提交（把第2行起，commit号前的“pick”全部改为“squash”，即第2行起的提交，全部合并到第1行中去）
>git rebase -i HEAD~[number_of_commits]
合并提交、修改历史的另一种命令（用于最后n个提交）
例如，合并最后两次提交：git rebase -i HEAD~2
注意：其实，通过git reset --soft $commit的方法，可以将原来多次的git提交记录合并为一个

【git revert】
	注意：revert没有 --soft --mixed --hard 选项
>git revert $commit
撤销$commit提交（还原源代码，如果和之后提交的源代码有冲突，会提示冲突后再revert；这时可用git reset head重置）；
不影响之前的提交（日志全部保留），而且将新增一个commit；
相当于，在当前版本上，把$commit的修改进行还原并提交

【git reset】
注意：其实，通过git reset --soft $commit的方法，可以将原来多次的git提交记录合并为一个
>git reset $commit
恢复到$commit版本后的状态；即$commit之后的提交全部重置（但源码不修改）；
注意：不包含$commit版本，$commit版本还是保持不变的，影响的是$commit之后的版本；
git reset --soft :取消了commit
git reset --mixed（默认）:取消了commit ，取消了add（重新提交时需要重新add）
git reset --hard :取消了commit ，取消了add，还原源码修改（文件全部被还原，也就无所谓add了）
	***强烈注意：--hard会把本地未提交的修改，也还原到$commit版本－－非常危险，谨慎使用－－可使用keep来代替
git reset --keep :取消了commit ，取消了add，还原源码修改
	保留本地未提交的修改（保留现有版本，不还原到$commit版本）
	一般用于还原至某一版本（标签）：git reset --keep $tagname
>git reset
取消索引（与git add . 对应）
针对某个文件取消索引：git reset hello.txt
